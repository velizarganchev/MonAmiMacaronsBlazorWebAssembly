@page "/product/{productId:int}"

@inject IProductService ProductService
@inject ICartService CartService

@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="cardDetails-container">
        <div class="cardDetails">
            <div class="cardDetails-img-container">
                <img src="@product.ImageUrl" class="cardDetails-img-top" alt="@product.Title">
            </div>
            <div class="cardDetails-body">
                <h5 class="cardDetails-title">@product.Title</h5>
                <p class="cardDetails-text">@product.Description</p>
            </div>
        </div>
        <div class="cardDetails-varian-price">
            @if (product.Variants != null && product.Variants.Count > 1)
            {
                <div>
                    @if (GetSelectedVariant != null)
                    {
                        @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                        {
                            <h6 class="originalPrice">$@GetSelectedVariant().OriginalPrice</h6>
                        }
                        <h5 class="cardDetails-text" id="price">$@GetSelectedVariant().Price</h5>
                    }
                </div>
                <select class="cardDetails-body-variant" @bind="currentTypeId">
                    @foreach (var variant in product.Variants)
                    {
                        <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                    }
                </select>

                <button class="cart-details-btn" @onclick="AddToCart">
                    <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
                </button>
            }
            @*
        <div class="cardDetails-varian-price-btn">

        </div>*@
        </div>
    </div>
}


@code {
    private Product? product = null;

    private string message = string.Empty;

    private int currentTypeId = 1;

    [Parameter]
    public int productId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product....";

        var result = await ProductService.GetProduct(productId);

        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;

            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(x => x.ProductTypeId == currentTypeId);

        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();

        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }

}
