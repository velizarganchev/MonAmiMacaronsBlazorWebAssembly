@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService


<PageTitle>Login</PageTitle>

<section class="section-cta">
    <div class="container">
        <div class="cta">
            <div class="cta-text-box">
                <h2 class="heading-secondary">Login</h2>
                <p class="cta-text">
                    Healthy, tasty and hassle-free meals are waiting for you. Start
                    eating well today. You can cancel or pause anytime. And the
                    first meal is on us!
                </p>
                <EditForm Model="user" OnValidSubmit="HandleLogin" class="cta-form">
                    <DataAnnotationsValidator />
                    <div>
                        <label for="email">Email address</label>
                        <InputText 
                            id="email"
                            type="email"
                            placeholder="me@example.com"
                            aria-describedby="emailHelp"
                            @bind-Value="user.Email"
                            required />
                        <ValidationMessage For="@(() => user.Email)" class="text-danger" />
                    </div>
                    <div>
                        <label for="password">Password</label>
                        <input id="password"
                               type="password"
                               placeholder="password@example"
                               aria-describedby="passwordHelpBlock" 
                               @bind-value="user.Password"
                               required />
                        <ValidationMessage For="@(() => user.Password)" class="text-danger" />
                    </div>

                    <button class="btn btn--form" type="submit">Login</button>

                    <div class="text-danger">
                        <span>@errorMessage</span>
                    </div>

                    <!-- <input type="checkbox" />
                    <input type="number" /> -->
                </EditForm>
            </div>
            <div class="cta-img-box"
                 role="img"
                 aria-label="Women enjoing food"></div>
        </div>
    </div>
</section>


@*<div class="container-register-login-form">
    <h3>Login</h3>

    <EditForm Model="user" OnValidSubmit="HandleLogin">
      <DataAnnotationsValidator/>

      <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <InputText type="email" class="form-control" id="email" aria-describedby="emailHelp" @bind-Value="user.Email"/>
        <ValidationMessage For="@(() => user.Email)" class="text-danger"/>
      </div>
      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText type="password" class="form-control" id="password" aria-describedby="passwordHelpBlock" @bind-Value="user.Password"/>
        <ValidationMessage For="@(() => user.Password)" class="text-danger"/>
      </div>
      <button type="submit" class="btn">Login</button>
    </EditForm>

    <div class="text-danger">
          <span>@errorMessage</span>
      </div>
</div>*@

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    async Task HandleLogin()
    {
        var result = await AuthService.Login(user);

        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();

            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}