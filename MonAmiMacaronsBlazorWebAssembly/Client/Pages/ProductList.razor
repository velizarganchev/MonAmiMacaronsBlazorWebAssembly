@page "/product"
@page "/product/{categoryUrl}"
@page "/product/search/{searchText}/{page:int}"
@inject IProductService ProductService

@if (ProductService.Products == null || ProductService.Products.Count == 00)
{
    <span>@ProductService.Message</span>
}
else
{
    <section class="languages ourProducts">
        <h2 class="md text-center my-2">
            Our Bakery Products
        </h2>
        <div class="container flex">
            @foreach (var product in ProductService.Products)
            {
                <div class="card">
                    <div class="card-header product-list" id="header">@product.Title</div>
                    <a href="/product/@product.Id"><img src="@product.ImageUrl" alt="" /></a>
                    <h5 id="price">@GetPriceText(product)</h5>
                </div>
            }
        </div>
    </section>
    for (int i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn @(i == ProductService.CurrentPage ? "btn-pagination" : "btn-outline-pagination" )"
   href="/product/search/@ProductService.LastSearchText/@i">@i</a>
    }
}
@code {
    [Parameter]
    public string? CategoryUrl { get; set; } = null;

    [Parameter]
    public string? SearchText { get; set; } = null;
    [Parameter]
    public int Page { get; set; } = 1;

    protected override async Task OnParametersSetAsync()
    {

        if (SearchText != null)
        {
            await ProductService.SearchProducts(SearchText, Page);
        }
        else
        {
            await ProductService.GetAllProducts(CategoryUrl);
        }
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);

        return $"Starting at ${minPrice}";
    }
}
