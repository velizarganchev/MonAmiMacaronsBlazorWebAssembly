@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<h3 class="cart-title">Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
        <span>@message</span>
}
else if (orderPlaced)
{
    <span>Thank you for your order! You can check your orders <a href="orders">here</a></span>
}
else
{
        <div class="cart-products-container">
        @foreach (var product in cartProducts)
        {
                    <div class="cart-product">
                        <div class="cart-product-img-wrap">
                            <img src="@product.ImageUrl" />
                        </div>

                        <input type="number"
               value="@product.Quantity"
               @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
               class="input-quantity"
               min="1" />

                        <div class="cart-product-content">
                            <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                            <span>@product.ProductType</span>
                            <div>
                                <button class="btn-delete"
                        @onclick="(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                                    Delete
                                </button>
                            </div>
                        </div>
                        <div class="cart-product-price">
                            $@(product.Price * product.Quantity)
                        </div>
                    </div>
        }

            <div class="cart-products-totalPrice">
                Total (@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)
            </div>
        </div>

        <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Place Order</button>
}


@code {
    List<CartProductResponse> cartProducts = null;

    string message = "Loading cart";
    bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();

    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());

        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }

        await CartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
