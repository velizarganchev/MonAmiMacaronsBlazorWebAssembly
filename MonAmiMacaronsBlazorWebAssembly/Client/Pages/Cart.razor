@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<section class="shopping-cart">
    <div class="container center-text">
        <h2 class="heading-secondary">Shopping Cart</h2>
    </div>
    @if (cartProducts == null || cartProducts.Count == 0)
    {
        <span class="heading-tertiary">@message</span>
    }
    else
    {
        @foreach (var product in cartProducts)

        {
            <div class="container grid grid--6--cols product-cart">
                @if (!string.IsNullOrEmpty(product.ImageUrl))
                {
                    <img class="product-image" src="@product.ImageUrl">
                }
                else
                {
                    <img class="product-image" src="@product.Images[0].Data">

                }
                <div class="product-details">
                    <div class="product-cart-title">@product.Title</div>
                    @*<p class="product-description"></p>*@
                </div>
                <div class="product-price">
                    $@product.Price
                </div>
                <div class="product-quantity">
                    <input type="number"
                   value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                   min="1">
                </div>
                <div class="product-removal">
                    <button class="remove-product"
                    @onclick="(() => RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Remove
                    </button>
                </div>
                <div class="product-line-price">$@(product.Price * product.Quantity)</div>
            </div>
        }

        <div class="totals">
            @*<div class="totals-item">
                <label class="totals-item-label">Subtotal</label>
                <div class="totals-value" id="cart-subtotal">(@cartProducts.Count): $@cartProducts.Sum(p => p.Price * p.Quantity)</div>
            </div>*@
            @*<div class="totals-item">
        <label class="totals-item-label">Shipping</label>
        <div class="totals-value" id="cart-shipping">$@shipping</div>
        </div>*@
            <div class="totals-item totals-item-total">
                <label class="totals-item-label">Grand Total</label>
                <div class="totals-value" id="cart-total">
                    (@cartProducts.Count): @cartProducts.Sum(p => p.Price * p.Quantity)
                </div>
            </div>
        </div>
        <div class="btn-container margin-right-md">
            <button class="btn btn--checkout" @onclick="Checkout">Checkout</button>
        </div>
    }
</section>



@code {
    List<CartProductResponse> cartProducts = null;

    string message = "Loading cart";
    bool isAuthenticated = false;
    decimal shipping = 14;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();

    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());

        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }

        await CartService.UpdateQuantity(product);
    }

    private async Task Checkout()
    {
        string url = await OrderService.Checkout();
        NavigationManager.NavigateTo(url);
    }
}
